{
    "config": {
        "lang": [
            "en"
        ],
        "min_search_length": 3,
        "prebuild_index": false,
        "separator": "[\\s\\-]+"
    },
    "docs": [
        {
            "location": "",
            "text": "Introduction to tfswitch The tfswitch command line tool lets you switch between different versions of terraform . If you do not have a particular version of terraform installed, tfswitch lets you download the version you desire. The installation is minimal and easy. Once installed, simply select the version you require from the dropdown and start using terraform.",
            "title": "Introduction to tfswitch"
        },
        {
            "location": "#introduction-to-tfswitch",
            "text": "The tfswitch command line tool lets you switch between different versions of terraform . If you do not have a particular version of terraform installed, tfswitch lets you download the version you desire. The installation is minimal and easy. Once installed, simply select the version you require from the dropdown and start using terraform.",
            "title": "Introduction to tfswitch"
        },
        {
            "location": "Continuous-Integration/",
            "text": "Jenkins setup #!/bin/bash echo \"Installing tfswitch locally\" wget https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh #Get the installer on to your machine chmod 755 install.sh #Make installer executable ./install.sh -b `pwd`/.bin #Install tfswitch in a location you have permission CUSTOMBIN=`pwd`/.bin #set custom bin path export PATH=$PATH:$CUSTOMBIN #Add custom bin path to PATH environment $CUSTOMBIN/tfswitch -b $CUSTOMBIN/terraform 0.11.7 #or simply tfswitch -b $CUSTOMBIN/terraform 0.11.7 terraform -v #testing version Circle CI setup Example config yaml version: 2 jobs: build: docker: - image: ubuntu working_directory: /go/src/github.com/skyzyx/tfswitch steps: - checkout - run: command: | set +e apt-get update apt-get install -y wget rm -rf /var/lib/apt/lists/* echo \"Installing tfswitch locally\" wget https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh #Get the installer on to your machine chmod 755 install.sh #Make installer executable ./install.sh -b `pwd`/.bin #Install tfswitch in a location you have permission CUSTOMBIN=`pwd`/.bin #set custom bin path export PATH=$PATH:$CUSTOMBIN #Add custom bin path to PATH environment $CUSTOMBIN/tfswitch -b $CUSTOMBIN/terraform 0.11.7 #or simply tfswitch -b $CUSTOMBIN/terraform 0.11.7 terraform -v #testing version",
            "title": "Continuous Integration"
        },
        {
            "location": "Continuous-Integration/#jenkins-setup",
            "text": "#!/bin/bash echo \"Installing tfswitch locally\" wget https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh #Get the installer on to your machine chmod 755 install.sh #Make installer executable ./install.sh -b `pwd`/.bin #Install tfswitch in a location you have permission CUSTOMBIN=`pwd`/.bin #set custom bin path export PATH=$PATH:$CUSTOMBIN #Add custom bin path to PATH environment $CUSTOMBIN/tfswitch -b $CUSTOMBIN/terraform 0.11.7 #or simply tfswitch -b $CUSTOMBIN/terraform 0.11.7 terraform -v #testing version",
            "title": "Jenkins setup"
        },
        {
            "location": "Continuous-Integration/#circle-ci-setup",
            "text": "Example config yaml version: 2 jobs: build: docker: - image: ubuntu working_directory: /go/src/github.com/skyzyx/tfswitch steps: - checkout - run: command: | set +e apt-get update apt-get install -y wget rm -rf /var/lib/apt/lists/* echo \"Installing tfswitch locally\" wget https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh #Get the installer on to your machine chmod 755 install.sh #Make installer executable ./install.sh -b `pwd`/.bin #Install tfswitch in a location you have permission CUSTOMBIN=`pwd`/.bin #set custom bin path export PATH=$PATH:$CUSTOMBIN #Add custom bin path to PATH environment $CUSTOMBIN/tfswitch -b $CUSTOMBIN/terraform 0.11.7 #or simply tfswitch -b $CUSTOMBIN/terraform 0.11.7 terraform -v #testing version",
            "title": "Circle CI setup"
        },
        {
            "location": "How-to-Contribute/",
            "text": "Step by step instructions An open source project becomes meaningful when people collaborate to improve the code. Feel free to look at the code, critique and make suggestions. Lets make tfswitch better! Required version go version 1.13 Step 1 - Create workspace Skip this step if you already have a github go workspace Create a github workspace. Step 2 - Set GOPATH Skip this step if you already have a github go workspace Export your GOPATH environment variable in your go directory. export GOPATH=`pwd` Step 3 - Clone repository Git clone this repository. git clone git@github.com:skyzyx/tfswitch.git Step 4 - Get dependencies Go get all the dependencies. go mod download go get -v -t -d ./... Test the code (optional). go vet -tests=false ./... go test -v ./... Step 5 - Build executable Create a new branch. git checkout -b feature/put-your-branch-name-here Refactor and add new features to the code. Go build the code. go build -o test-tfswitch Test the code and create a new pull request! Contributors",
            "title": "How to Contribute"
        },
        {
            "location": "How-to-Contribute/#step-by-step-instructions",
            "text": "An open source project becomes meaningful when people collaborate to improve the code. Feel free to look at the code, critique and make suggestions. Lets make tfswitch better!",
            "title": "Step by step instructions"
        },
        {
            "location": "How-to-Contribute/#required-version",
            "text": "go version 1.13",
            "title": "Required version"
        },
        {
            "location": "How-to-Contribute/#step-1-create-workspace",
            "text": "Skip this step if you already have a github go workspace Create a github workspace.",
            "title": "Step 1 - Create workspace"
        },
        {
            "location": "How-to-Contribute/#step-2-set-gopath",
            "text": "Skip this step if you already have a github go workspace Export your GOPATH environment variable in your go directory. export GOPATH=`pwd`",
            "title": "Step 2 - Set GOPATH"
        },
        {
            "location": "How-to-Contribute/#step-3-clone-repository",
            "text": "Git clone this repository. git clone git@github.com:skyzyx/tfswitch.git",
            "title": "Step 3 - Clone repository"
        },
        {
            "location": "How-to-Contribute/#step-4-get-dependencies",
            "text": "Go get all the dependencies. go mod download go get -v -t -d ./... Test the code (optional). go vet -tests=false ./... go test -v ./...",
            "title": "Step 4 - Get dependencies"
        },
        {
            "location": "How-to-Contribute/#step-5-build-executable",
            "text": "Create a new branch. git checkout -b feature/put-your-branch-name-here Refactor and add new features to the code. Go build the code. go build -o test-tfswitch Test the code and create a new pull request!",
            "title": "Step 5 - Build executable"
        },
        {
            "location": "How-to-Contribute/#contributors",
            "text": "",
            "title": "Contributors"
        },
        {
            "location": "Install/",
            "text": "Installation tfswitch is available for MacOS and Linux based operating systems. Homebrew Installation for MacOS is the easiest with Homebrew. If you do not have homebrew installed, click here . brew install warrensbox/tap/tfswitch Linux Installation for Linux operation systems. curl -L https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh | bash Snapcraft for CentOS, Ubuntu, Linux Mint, RHEL, Debian, Fedora sudo snap install tfswitch Install from source Alternatively, you can install the binary from the source here . Having trouble installing .",
            "title": "Install"
        },
        {
            "location": "Install/#installation",
            "text": "tfswitch is available for MacOS and Linux based operating systems.",
            "title": "Installation"
        },
        {
            "location": "Install/#homebrew",
            "text": "Installation for MacOS is the easiest with Homebrew. If you do not have homebrew installed, click here . brew install warrensbox/tap/tfswitch",
            "title": "Homebrew"
        },
        {
            "location": "Install/#linux",
            "text": "Installation for Linux operation systems. curl -L https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh | bash",
            "title": "Linux"
        },
        {
            "location": "Install/#snapcraft-for-centos-ubuntu-linux-mint-rhel-debian-fedora",
            "text": "sudo snap install tfswitch",
            "title": "Snapcraft for CentOS, Ubuntu, Linux Mint, RHEL, Debian, Fedora"
        },
        {
            "location": "Install/#install-from-source",
            "text": "Alternatively, you can install the binary from the source here . Having trouble installing .",
            "title": "Install from source"
        },
        {
            "location": "Quick-Start/",
            "text": "How to use: Use dropdown menu to select version You can switch between different versions of terraform by typing the command tfswitch on your terminal. Select the version of terraform you require by using the up and down arrow. Hit Enter to select the desired version. The most recently selected versions are presented at the top of the dropdown. Supply version on command line You can also supply the desired version as an argument on the command line. For example, tfswitch 0.10.5 for version 0.10.5 of terraform. Hit Enter to switch. See all versions including beta, alpha and release candidates(rc) Display all versions including beta, alpha and release candidates(rc). For example, tfswitch -l or tfswitch --list-all to see all versions. Hit Enter to select the desired version. Use environment variables You can also set the TF_VERSION environment variable to your desired terraform version. For example: export TF_VERSION=0.14.4 tfswitch #will automatically switch to terraform version 0.14.4 Install latest version only Install the latest stable version only. Run tfswitch -u or tfswitch --latest . Hit Enter to install. Install latest implicit version for stable releases Install the latest implicit stable version. Ex: tfswitch -s 0.13 or tfswitch --latest-stable 0.13 downloads 0.13.6 (latest) version. Hit Enter to install. Install latest implicit version for beta, alpha and release candidates(rc) Install the latest implicit pre-release version. Ex: tfswitch -p 0.13 or tfswitch --latest-pre 0.13 downloads 0.13.0-rc1 (latest) version. Hit Enter to install. Use version.tf file If a .tf file with the terraform constrain is included in the current directory, it should automatically download or switch to that terraform version. For example, the following should automatically switch terraform to the lastest version: terraform { required_version = \">= 0.12.9\" required_providers { aws = \">= 2.52.0\" kubernetes = \">= 1.11.1\" } } Use .tfswitch.toml file (For non-admin - users with limited privilege on their computers) This is similiar to using a .tfswitchrc file, but you can specify a custom binary path for your terraform installation Create a custom binary path. Ex: mkdir /Users/warrenveerasingam/bin (replace warrenveerasingam with your username) Add the path to your PATH. Ex: export PATH=$PATH:/Users/warrenveerasingam/bin (add this to your bash profile or zsh profile) Pass -b or --bin parameter with your custom path to install terraform. Ex: tfswitch -b /Users/warrenveerasingam/bin/terraform 0.10.8 Optionally, you can create a .tfswitch.toml file in your terraform directory(current directory) OR in your home directory(~/.tfswitch.toml). The toml file in the current directory has a higher precedence than toml file in the home directory Your .tfswitch.toml file should look like this: bin = \"/Users/warrenveerasingam/bin/terraform\" version = \"0.11.3\" Run tfswitch and it should automatically install the required terraform version in the specified binary path Use .tfswitchrc file Create a .tfswitchrc file containing the desired version For example, echo \"0.10.5\" >> .tfswitchrc for version 0.10.5 of terraform Run the command tfswitch in the same directory as your .tfswitchrc Instead of a .tfswitchrc file, a .terraform-version file may be used for compatibility with tfenv and other tools which use it Automatically switch with bash Add the following to the end of your ~/.bashrc file: (Use either .tfswitchrc or .tfswitch.toml or .terraform-version ) cdtfswitch(){ builtin cd \"$@\"; cdir=$PWD; if [ -e \"$cdir/.tfswitchrc\" ]; then tfswitch fi } alias cd='cdtfswitch' Automatically switch with zsh Add the following to the end of your ~/.zshrc file: load-tfswitch() { local tfswitchrc_path=\".tfswitchrc\" if [ -f \"$tfswitchrc_path\" ]; then tfswitch fi } add-zsh-hook chpwd load-tfswitch load-tfswitch NOTE: if you see an error like this: command not found: add-zsh-hook , then you might be on an older version of zsh (see below), or you simply need to load add-zsh-hook by adding this to your .zshrc : autoload -U add-zsh-hook older version of zsh cd(){ builtin cd \"$@\"; cdir=$PWD; if [ -e \"$cdir/.tfswitchrc\" ]; then tfswitch fi } Automatically switch with fish shell Add the following to the end of your ~/.config/fish/config.fish file: function switch_terraform --on-event fish_postexec string match --regex '^cd\\s' \"$argv\" > /dev/null set --local is_command_cd $status if test $is_command_cd -eq 0 if count *.tf > /dev/null grep -c \"required_version\" *.tf > /dev/null set --local tf_contains_version $status if test $tf_contains_version -eq 0 command tfswitch end end end end",
            "title": "Quick Start"
        },
        {
            "location": "Quick-Start/#how-to-use",
            "text": "",
            "title": "How to use:"
        },
        {
            "location": "Quick-Start/#use-dropdown-menu-to-select-version",
            "text": "You can switch between different versions of terraform by typing the command tfswitch on your terminal. Select the version of terraform you require by using the up and down arrow. Hit Enter to select the desired version. The most recently selected versions are presented at the top of the dropdown.",
            "title": "Use dropdown menu to select version"
        },
        {
            "location": "Quick-Start/#supply-version-on-command-line",
            "text": "You can also supply the desired version as an argument on the command line. For example, tfswitch 0.10.5 for version 0.10.5 of terraform. Hit Enter to switch.",
            "title": "Supply version on command line"
        },
        {
            "location": "Quick-Start/#see-all-versions-including-beta-alpha-and-release-candidatesrc",
            "text": "Display all versions including beta, alpha and release candidates(rc). For example, tfswitch -l or tfswitch --list-all to see all versions. Hit Enter to select the desired version.",
            "title": "See all versions including beta, alpha and release candidates(rc)"
        },
        {
            "location": "Quick-Start/#use-environment-variables",
            "text": "You can also set the TF_VERSION environment variable to your desired terraform version. For example: export TF_VERSION=0.14.4 tfswitch #will automatically switch to terraform version 0.14.4",
            "title": "Use environment variables"
        },
        {
            "location": "Quick-Start/#install-latest-version-only",
            "text": "Install the latest stable version only. Run tfswitch -u or tfswitch --latest . Hit Enter to install.",
            "title": "Install latest version only"
        },
        {
            "location": "Quick-Start/#install-latest-implicit-version-for-stable-releases",
            "text": "Install the latest implicit stable version. Ex: tfswitch -s 0.13 or tfswitch --latest-stable 0.13 downloads 0.13.6 (latest) version. Hit Enter to install.",
            "title": "Install latest implicit version for stable releases"
        },
        {
            "location": "Quick-Start/#install-latest-implicit-version-for-beta-alpha-and-release-candidatesrc",
            "text": "Install the latest implicit pre-release version. Ex: tfswitch -p 0.13 or tfswitch --latest-pre 0.13 downloads 0.13.0-rc1 (latest) version. Hit Enter to install.",
            "title": "Install latest implicit version for beta, alpha and release candidates(rc)"
        },
        {
            "location": "Quick-Start/#use-versiontf-file",
            "text": "If a .tf file with the terraform constrain is included in the current directory, it should automatically download or switch to that terraform version. For example, the following should automatically switch terraform to the lastest version: terraform { required_version = \">= 0.12.9\" required_providers { aws = \">= 2.52.0\" kubernetes = \">= 1.11.1\" } }",
            "title": "Use version.tf file"
        },
        {
            "location": "Quick-Start/#use-tfswitchtoml-file-for-non-admin-users-with-limited-privilege-on-their-computers",
            "text": "This is similiar to using a .tfswitchrc file, but you can specify a custom binary path for your terraform installation Create a custom binary path. Ex: mkdir /Users/warrenveerasingam/bin (replace warrenveerasingam with your username) Add the path to your PATH. Ex: export PATH=$PATH:/Users/warrenveerasingam/bin (add this to your bash profile or zsh profile) Pass -b or --bin parameter with your custom path to install terraform. Ex: tfswitch -b /Users/warrenveerasingam/bin/terraform 0.10.8 Optionally, you can create a .tfswitch.toml file in your terraform directory(current directory) OR in your home directory(~/.tfswitch.toml). The toml file in the current directory has a higher precedence than toml file in the home directory Your .tfswitch.toml file should look like this: bin = \"/Users/warrenveerasingam/bin/terraform\" version = \"0.11.3\" Run tfswitch and it should automatically install the required terraform version in the specified binary path",
            "title": "Use .tfswitch.toml file  (For non-admin - users with limited privilege on their computers)"
        },
        {
            "location": "Quick-Start/#use-tfswitchrc-file",
            "text": "Create a .tfswitchrc file containing the desired version For example, echo \"0.10.5\" >> .tfswitchrc for version 0.10.5 of terraform Run the command tfswitch in the same directory as your .tfswitchrc Instead of a .tfswitchrc file, a .terraform-version file may be used for compatibility with tfenv and other tools which use it Automatically switch with bash Add the following to the end of your ~/.bashrc file: (Use either .tfswitchrc or .tfswitch.toml or .terraform-version ) cdtfswitch(){ builtin cd \"$@\"; cdir=$PWD; if [ -e \"$cdir/.tfswitchrc\" ]; then tfswitch fi } alias cd='cdtfswitch' Automatically switch with zsh Add the following to the end of your ~/.zshrc file: load-tfswitch() { local tfswitchrc_path=\".tfswitchrc\" if [ -f \"$tfswitchrc_path\" ]; then tfswitch fi } add-zsh-hook chpwd load-tfswitch load-tfswitch NOTE: if you see an error like this: command not found: add-zsh-hook , then you might be on an older version of zsh (see below), or you simply need to load add-zsh-hook by adding this to your .zshrc : autoload -U add-zsh-hook older version of zsh cd(){ builtin cd \"$@\"; cdir=$PWD; if [ -e \"$cdir/.tfswitchrc\" ]; then tfswitch fi } Automatically switch with fish shell Add the following to the end of your ~/.config/fish/config.fish file: function switch_terraform --on-event fish_postexec string match --regex '^cd\\s' \"$argv\" > /dev/null set --local is_command_cd $status if test $is_command_cd -eq 0 if count *.tf > /dev/null grep -c \"required_version\" *.tf > /dev/null set --local tf_contains_version $status if test $tf_contains_version -eq 0 command tfswitch end end end end",
            "title": "Use .tfswitchrc file"
        },
        {
            "location": "Troubleshoot/",
            "text": "Problem: install: can't change permissions of /usr/local/bin: Operation not permitted \"Unable to remove symlink. You must have SUDO privileges\" \"Unable to create symlink. You must have SUDO privileges\" install: cannot create regular file '/usr/local/bin/tfswitch': Permission denied Solution: You probably need to have privileges to install tfswitch at /usr/local/bin. Try the following: wget https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh #Get the installer on to your machine: chmod 755 install.sh #Make installer executable ./install.sh -b $HOME/.bin #Install tfswitch in a location you have permission: $HOME/.bin/tfswitch #test export PATH=$PATH:$HOME/.bin #Export your .bin into your path #You should probably add step 4 in your `.bash_profile` in your $HOME directory. #Next, try: `tfswitch -b $HOME/.bin/terraform 0.11.7` #or simply `tfswitch -b $HOME/.bin/terraform` See the custom directory option -b :",
            "title": "Troubleshoot"
        },
        {
            "location": "Upgrade-or-Uninstall/",
            "text": "Upgrade: Homebrew brew upgrade warrensbox/tap/tfswitch Linux Rerun: curl -L https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh | bash Uninstall: Homebrew brew uninstall warrensbox/tap/tfswitch Linux Run: rm /usr/local/bin/tfswitch",
            "title": "Upgrade or Uninstall"
        },
        {
            "location": "Upgrade-or-Uninstall/#upgrade",
            "text": "",
            "title": "Upgrade:"
        },
        {
            "location": "Upgrade-or-Uninstall/#homebrew",
            "text": "brew upgrade warrensbox/tap/tfswitch",
            "title": "Homebrew"
        },
        {
            "location": "Upgrade-or-Uninstall/#linux",
            "text": "Rerun: curl -L https://raw.githubusercontent.com/skyzyx/tfswitch/release/install.sh | bash",
            "title": "Linux"
        },
        {
            "location": "Upgrade-or-Uninstall/#uninstall",
            "text": "",
            "title": "Uninstall:"
        },
        {
            "location": "Upgrade-or-Uninstall/#homebrew_1",
            "text": "brew uninstall warrensbox/tap/tfswitch",
            "title": "Homebrew"
        },
        {
            "location": "Upgrade-or-Uninstall/#linux_1",
            "text": "Run: rm /usr/local/bin/tfswitch",
            "title": "Linux"
        }
    ]
}
